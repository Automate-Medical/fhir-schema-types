# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type SubscriptionStatus {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  status: code  _status: ElementBase
  type: code  _type: ElementBase
  eventsSinceSubscriptionStart: integer64  _eventsSinceSubscriptionStart: ElementBase
  eventsInNotification: Int  _eventsInNotification: ElementBase
  subscription: Reference!
  topic: canonical  _topic: ElementBase
  error: [CodeableConcept]
}

input SubscriptionStatusInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  status: code  _status: ElementBase
  type: code  _type: ElementBase
  eventsSinceSubscriptionStart: integer64  _eventsSinceSubscriptionStart: ElementBase
  eventsInNotification: Int  _eventsInNotification: ElementBase
  subscription: ReferenceInput!
  topic: canonical  _topic: ElementBase
  error: [CodeableConceptInput]
}

type SubscriptionStatusReadType {
  SubscriptionStatus(id: ID!): SubscriptionStatus
}

type SubscriptionStatusListType {
  SubscriptionStatusList(_filter: String
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [SubscriptionStatus]
}

type SubscriptionStatusConnectionType {
  SubscriptionStatusConection(_filter: String
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): SubscriptionStatusConnection
}

type SubscriptionStatusConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [SubscriptionStatusEdge]
}

type SubscriptionStatusEdge {
  mode: String
  score: Float
  resource: SubscriptionStatus
}

type SubscriptionStatusCreateType {
  SubscriptionStatusCreate(resource: SubscriptionStatusInput): SubscriptionStatusCreation
}

type SubscriptionStatusCreation {
  location: String
  resource: SubscriptionStatus
  information: OperationOutcome
}

type SubscriptionStatusUpdateType {
  SubscriptionStatusUpdate(id: ID, resource: SubscriptionStatusInput): SubscriptionStatusUpdate
}

type SubscriptionStatusUpdate {
  resource: SubscriptionStatus
  information: OperationOutcome
}

type SubscriptionStatusDeleteType {
  SubscriptionStatusDelete(id: ID): SubscriptionStatusDelete
}

type SubscriptionStatusDelete {
  information: OperationOutcome
}

