# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type MedicinalProductDefinition {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  type: CodeableConcept
  domain: CodeableConcept
  version: String  _version: ElementBase
  status: CodeableConcept
  statusDate: dateTime  _statusDate: ElementBase
  description: markdown  _description: ElementBase
  combinedPharmaceuticalDoseForm: CodeableConcept
  indication: markdown  _indication: ElementBase
  legalStatusOfSupply: CodeableConcept
  additionalMonitoringIndicator: CodeableConcept
  specialMeasures: [CodeableConcept]
  paediatricUseIndicator: CodeableConcept
  classification: [CodeableConcept]
  characteristic: [CodeableConcept]
  marketingStatus: [MarketingStatus]
  ingredient: [CodeableReference]
  impurity: [Reference]
  attachedDocument: [Reference]
  masterFile: [Reference]
  contact: [MedicinalProductDefinitionContact]
  clinicalTrial: [Reference]
  name: [MedicinalProductDefinitionName]!
  crossReference: [MedicinalProductDefinitionCrossReference]
  operation: [MedicinalProductDefinitionOperation]
  package: [MedicinalProductDefinitionPackage]
  administrableProduct: [MedicinalProductDefinitionAdministrableProduct]
}

type MedicinalProductDefinitionContact {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept
  contact: Reference!
}

type MedicinalProductDefinitionName {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  productName: String  _productName: ElementBase
  type: CodeableConcept
  namePart: [MedicinalProductDefinitionNameNamePart]
  countryLanguage: [MedicinalProductDefinitionNameCountryLanguage]
}

type MedicinalProductDefinitionNameNamePart {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  part: String  _part: ElementBase
  type: CodeableConcept!
}

type MedicinalProductDefinitionNameCountryLanguage {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  country: CodeableConcept!
  jurisdiction: CodeableConcept
  language: CodeableConcept!
}

type MedicinalProductDefinitionCrossReference {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  product: CodeableReference!
  type: CodeableConcept
}

type MedicinalProductDefinitionOperation {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableReference
  effectiveDate: Period
  organization: [Reference]
  authorization: Reference
  confidentialityIndicator: CodeableConcept
}

type MedicinalProductDefinitionPackage {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept
  sizeQuantity: Quantity
  sizeInteger: Int  _sizeInteger: ElementBase
  package: Reference
}

type MedicinalProductDefinitionAdministrableProduct {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  route: [CodeableConcept]
  product: Reference
}

input MedicinalProductDefinitionInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  type: CodeableConceptInput
  domain: CodeableConceptInput
  version: String  _version: ElementBase
  status: CodeableConceptInput
  statusDate: dateTime  _statusDate: ElementBase
  description: markdown  _description: ElementBase
  combinedPharmaceuticalDoseForm: CodeableConceptInput
  indication: markdown  _indication: ElementBase
  legalStatusOfSupply: CodeableConceptInput
  additionalMonitoringIndicator: CodeableConceptInput
  specialMeasures: [CodeableConceptInput]
  paediatricUseIndicator: CodeableConceptInput
  classification: [CodeableConceptInput]
  characteristic: [CodeableConceptInput]
  marketingStatus: [MarketingStatusInput]
  ingredient: [CodeableReferenceInput]
  impurity: [ReferenceInput]
  attachedDocument: [ReferenceInput]
  masterFile: [ReferenceInput]
  contact: [MedicinalProductDefinitionContactInput]
  clinicalTrial: [ReferenceInput]
  name: [MedicinalProductDefinitionNameInput]!
  crossReference: [MedicinalProductDefinitionCrossReferenceInput]
  operation: [MedicinalProductDefinitionOperationInput]
  package: [MedicinalProductDefinitionPackageInput]
  administrableProduct: [MedicinalProductDefinitionAdministrableProductInput]
}

input MedicinalProductDefinitionContactInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodeableConceptInput
  contact: ReferenceInput!
}

input MedicinalProductDefinitionNameInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  productName: String  _productName: ElementBase
  type: CodeableConceptInput
  namePart: [MedicinalProductDefinitionNameNamePartInput]
  countryLanguage: [MedicinalProductDefinitionNameCountryLanguageInput]
}

input MedicinalProductDefinitionNameNamePartInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  part: String  _part: ElementBase
  type: CodeableConceptInput!
}

input MedicinalProductDefinitionNameCountryLanguageInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  country: CodeableConceptInput!
  jurisdiction: CodeableConceptInput
  language: CodeableConceptInput!
}

input MedicinalProductDefinitionCrossReferenceInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  product: CodeableReferenceInput!
  type: CodeableConceptInput
}

input MedicinalProductDefinitionOperationInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodeableReferenceInput
  effectiveDate: PeriodInput
  organization: [ReferenceInput]
  authorization: ReferenceInput
  confidentialityIndicator: CodeableConceptInput
}

input MedicinalProductDefinitionPackageInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodeableConceptInput
  sizeQuantity: QuantityInput
  sizeInteger: Int  _sizeInteger: ElementBase
  package: ReferenceInput
}

input MedicinalProductDefinitionAdministrableProductInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  route: [CodeableConceptInput]
  product: ReferenceInput
}

type MedicinalProductDefinitionReadType {
  MedicinalProductDefinition(id: ID!): MedicinalProductDefinition
}

type MedicinalProductDefinitionListType {
  MedicinalProductDefinitionList(_filter: String
    characteristic: [token]
    contact: [reference]
    domain: [token]
    identifier: [token]
    ingredient: [reference]
    ingredient_code: [token]
    master_file: [reference]
    name: [String]
    name_language: [token]
    product_classification: [token]
    status: [token]
    type: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [MedicinalProductDefinition]
}

type MedicinalProductDefinitionConnectionType {
  MedicinalProductDefinitionConection(_filter: String
    characteristic: [token]
    contact: [reference]
    domain: [token]
    identifier: [token]
    ingredient: [reference]
    ingredient_code: [token]
    master_file: [reference]
    name: [String]
    name_language: [token]
    product_classification: [token]
    status: [token]
    type: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): MedicinalProductDefinitionConnection
}

type MedicinalProductDefinitionConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [MedicinalProductDefinitionEdge]
}

type MedicinalProductDefinitionEdge {
  mode: String
  score: Float
  resource: MedicinalProductDefinition
}

type MedicinalProductDefinitionCreateType {
  MedicinalProductDefinitionCreate(resource: MedicinalProductDefinitionInput): MedicinalProductDefinitionCreation
}

type MedicinalProductDefinitionCreation {
  location: String
  resource: MedicinalProductDefinition
  information: OperationOutcome
}

type MedicinalProductDefinitionUpdateType {
  MedicinalProductDefinitionUpdate(id: ID, resource: MedicinalProductDefinitionInput): MedicinalProductDefinitionUpdate
}

type MedicinalProductDefinitionUpdate {
  resource: MedicinalProductDefinition
  information: OperationOutcome
}

type MedicinalProductDefinitionDeleteType {
  MedicinalProductDefinitionDelete(id: ID): MedicinalProductDefinitionDelete
}

type MedicinalProductDefinitionDelete {
  information: OperationOutcome
}

