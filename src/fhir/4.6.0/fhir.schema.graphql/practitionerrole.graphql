# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type PractitionerRole {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  active: Boolean  _active: ElementBase
  period: Period
  practitioner: Reference
  organization: Reference
  code: [CodeableConcept]
  specialty: [CodeableConcept]
  location: [Reference]
  healthcareService: [Reference]
  telecom: [ContactPoint]
  availableTime: [PractitionerRoleAvailableTime]
  notAvailable: [PractitionerRoleNotAvailable]
  availabilityExceptions: String  _availabilityExceptions: ElementBase
  endpoint: [Reference]
}

type PractitionerRoleAvailableTime {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  daysOfWeek: code  _daysOfWeek: [ElementBase]
  allDay: Boolean  _allDay: ElementBase
  availableStartTime: time  _availableStartTime: ElementBase
  availableEndTime: time  _availableEndTime: ElementBase
}

type PractitionerRoleNotAvailable {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  description: String  _description: ElementBase
  during: Period
}

input PractitionerRoleInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  active: Boolean  _active: ElementBase
  period: PeriodInput
  practitioner: ReferenceInput
  organization: ReferenceInput
  code: [CodeableConceptInput]
  specialty: [CodeableConceptInput]
  location: [ReferenceInput]
  healthcareService: [ReferenceInput]
  telecom: [ContactPointInput]
  availableTime: [PractitionerRoleAvailableTimeInput]
  notAvailable: [PractitionerRoleNotAvailableInput]
  availabilityExceptions: String  _availabilityExceptions: ElementBase
  endpoint: [ReferenceInput]
}

input PractitionerRoleAvailableTimeInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  daysOfWeek: code  _daysOfWeek: [ElementBase]
  allDay: Boolean  _allDay: ElementBase
  availableStartTime: time  _availableStartTime: ElementBase
  availableEndTime: time  _availableEndTime: ElementBase
}

input PractitionerRoleNotAvailableInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  description: String  _description: ElementBase
  during: PeriodInput
}

type PractitionerRoleReadType {
  PractitionerRole(id: ID!): PractitionerRole
}

type PractitionerRoleListType {
  PractitionerRoleList(_filter: String
    active: [token]
    date: [date]
    email: [token]
    endpoint: [reference]
    identifier: [token]
    location: [reference]
    organization: [reference]
    phone: [token]
    practitioner: [reference]
    role: [token]
    service: [reference]
    specialty: [token]
    telecom: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [PractitionerRole]
}

type PractitionerRoleConnectionType {
  PractitionerRoleConection(_filter: String
    active: [token]
    date: [date]
    email: [token]
    endpoint: [reference]
    identifier: [token]
    location: [reference]
    organization: [reference]
    phone: [token]
    practitioner: [reference]
    role: [token]
    service: [reference]
    specialty: [token]
    telecom: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): PractitionerRoleConnection
}

type PractitionerRoleConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [PractitionerRoleEdge]
}

type PractitionerRoleEdge {
  mode: String
  score: Float
  resource: PractitionerRole
}

type PractitionerRoleCreateType {
  PractitionerRoleCreate(resource: PractitionerRoleInput): PractitionerRoleCreation
}

type PractitionerRoleCreation {
  location: String
  resource: PractitionerRole
  information: OperationOutcome
}

type PractitionerRoleUpdateType {
  PractitionerRoleUpdate(id: ID, resource: PractitionerRoleInput): PractitionerRoleUpdate
}

type PractitionerRoleUpdate {
  resource: PractitionerRole
  information: OperationOutcome
}

type PractitionerRoleDeleteType {
  PractitionerRoleDelete(id: ID): PractitionerRoleDelete
}

type PractitionerRoleDelete {
  information: OperationOutcome
}

