# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type Location {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  operationalStatus: Coding
  name: String  _name: ElementBase
  alias: String  _alias: [ElementBase]
  description: String  _description: ElementBase
  mode: code  _mode: ElementBase
  type: [CodeableConcept]
  telecom: [ContactPoint]
  address: Address
  physicalType: CodeableConcept
  position: LocationPosition
  managingOrganization: Reference
  partOf: Reference
  hoursOfOperation: [LocationHoursOfOperation]
  availabilityExceptions: String  _availabilityExceptions: ElementBase
  endpoint: [Reference]
}

type LocationPosition {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  longitude: decimal  _longitude: ElementBase
  latitude: decimal  _latitude: ElementBase
  altitude: decimal  _altitude: ElementBase
}

type LocationHoursOfOperation {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  daysOfWeek: code  _daysOfWeek: [ElementBase]
  allDay: Boolean  _allDay: ElementBase
  openingTime: time  _openingTime: ElementBase
  closingTime: time  _closingTime: ElementBase
}

input LocationInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  status: code  _status: ElementBase
  operationalStatus: CodingInput
  name: String  _name: ElementBase
  alias: String  _alias: [ElementBase]
  description: String  _description: ElementBase
  mode: code  _mode: ElementBase
  type: [CodeableConceptInput]
  telecom: [ContactPointInput]
  address: AddressInput
  physicalType: CodeableConceptInput
  position: LocationPositionInput
  managingOrganization: ReferenceInput
  partOf: ReferenceInput
  hoursOfOperation: [LocationHoursOfOperationInput]
  availabilityExceptions: String  _availabilityExceptions: ElementBase
  endpoint: [ReferenceInput]
}

input LocationPositionInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  longitude: decimal  _longitude: ElementBase
  latitude: decimal  _latitude: ElementBase
  altitude: decimal  _altitude: ElementBase
}

input LocationHoursOfOperationInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  daysOfWeek: code  _daysOfWeek: [ElementBase]
  allDay: Boolean  _allDay: ElementBase
  openingTime: time  _openingTime: ElementBase
  closingTime: time  _closingTime: ElementBase
}

type LocationReadType {
  Location(id: ID!): Location
}

type LocationListType {
  LocationList(_filter: String
    address: [String]
    address_city: [String]
    address_country: [String]
    address_postalcode: [String]
    address_state: [String]
    address_use: [token]
    endpoint: [reference]
    identifier: [token]
    name: [String]
    near: [special]
    operational_status: [token]
    organization: [reference]
    partof: [reference]
    status: [token]
    type: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [Location]
}

type LocationConnectionType {
  LocationConection(_filter: String
    address: [String]
    address_city: [String]
    address_country: [String]
    address_postalcode: [String]
    address_state: [String]
    address_use: [token]
    endpoint: [reference]
    identifier: [token]
    name: [String]
    near: [special]
    operational_status: [token]
    organization: [reference]
    partof: [reference]
    status: [token]
    type: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): LocationConnection
}

type LocationConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [LocationEdge]
}

type LocationEdge {
  mode: String
  score: Float
  resource: Location
}

type LocationCreateType {
  LocationCreate(resource: LocationInput): LocationCreation
}

type LocationCreation {
  location: String
  resource: Location
  information: OperationOutcome
}

type LocationUpdateType {
  LocationUpdate(id: ID, resource: LocationInput): LocationUpdate
}

type LocationUpdate {
  resource: Location
  information: OperationOutcome
}

type LocationDeleteType {
  LocationDelete(id: ID): LocationDelete
}

type LocationDelete {
  information: OperationOutcome
}

