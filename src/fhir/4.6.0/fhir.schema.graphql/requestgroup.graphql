# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type RequestGroup {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  instantiatesCanonical: canonical  _instantiatesCanonical: [ElementBase]
  instantiatesUri: uri  _instantiatesUri: [ElementBase]
  basedOn: [Reference]
  replaces: [Reference]
  groupIdentifier: Identifier
  status: code  _status: ElementBase
  intent: code  _intent: ElementBase
  priority: code  _priority: ElementBase
  code: CodeableConcept
  subject: Reference
  encounter: Reference
  authoredOn: dateTime  _authoredOn: ElementBase
  author: Reference
  reason: [CodeableReference]
  note: [Annotation]
  action: [RequestGroupAction]
}

type RequestGroupAction {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  prefix: String  _prefix: ElementBase
  title: String  _title: ElementBase
  description: String  _description: ElementBase
  textEquivalent: String  _textEquivalent: ElementBase
  priority: code  _priority: ElementBase
  code: [CodeableConcept]
  documentation: [RelatedArtifact]
  condition: [RequestGroupActionCondition]
  relatedAction: [RequestGroupActionRelatedAction]
  timingDateTime: dateTime  _timingDateTime: ElementBase
  timingAge: Age
  timingPeriod: Period
  timingDuration: Duration
  timingRange: Range
  timingTiming: Timing
  location: CodeableReference
  participant: [RequestGroupActionParticipant]
  type: CodeableConcept
  groupingBehavior: code  _groupingBehavior: ElementBase
  selectionBehavior: code  _selectionBehavior: ElementBase
  requiredBehavior: code  _requiredBehavior: ElementBase
  precheckBehavior: code  _precheckBehavior: ElementBase
  cardinalityBehavior: code  _cardinalityBehavior: ElementBase
  resource: Reference
  action: [RequestGroupAction]
}

type RequestGroupActionCondition {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  kind: code  _kind: ElementBase
  expression: Expression
}

type RequestGroupActionRelatedAction {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  targetId: ID  _targetId: ElementBase
  relationship: code  _relationship: ElementBase
  offsetDuration: Duration
  offsetRange: Range
}

type RequestGroupActionParticipant {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  type: code  _type: ElementBase
  typeReference: Reference
  role: CodeableConcept
  function: CodeableConcept
  actor: Reference
}

input RequestGroupInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  instantiatesCanonical: canonical  _instantiatesCanonical: [ElementBase]
  instantiatesUri: uri  _instantiatesUri: [ElementBase]
  basedOn: [ReferenceInput]
  replaces: [ReferenceInput]
  groupIdentifier: IdentifierInput
  status: code  _status: ElementBase
  intent: code  _intent: ElementBase
  priority: code  _priority: ElementBase
  code: CodeableConceptInput
  subject: ReferenceInput
  encounter: ReferenceInput
  authoredOn: dateTime  _authoredOn: ElementBase
  author: ReferenceInput
  reason: [CodeableReferenceInput]
  note: [AnnotationInput]
  action: [RequestGroupActionInput]
}

input RequestGroupActionInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  prefix: String  _prefix: ElementBase
  title: String  _title: ElementBase
  description: String  _description: ElementBase
  textEquivalent: String  _textEquivalent: ElementBase
  priority: code  _priority: ElementBase
  code: [CodeableConceptInput]
  documentation: [RelatedArtifactInput]
  condition: [RequestGroupActionConditionInput]
  relatedAction: [RequestGroupActionRelatedActionInput]
  timingDateTime: dateTime  _timingDateTime: ElementBase
  timingAge: AgeInput
  timingPeriod: PeriodInput
  timingDuration: DurationInput
  timingRange: RangeInput
  timingTiming: TimingInput
  location: CodeableReferenceInput
  participant: [RequestGroupActionParticipantInput]
  type: CodeableConceptInput
  groupingBehavior: code  _groupingBehavior: ElementBase
  selectionBehavior: code  _selectionBehavior: ElementBase
  requiredBehavior: code  _requiredBehavior: ElementBase
  precheckBehavior: code  _precheckBehavior: ElementBase
  cardinalityBehavior: code  _cardinalityBehavior: ElementBase
  resource: ReferenceInput
  action: [RequestGroupAction]
}

input RequestGroupActionConditionInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  kind: code  _kind: ElementBase
  expression: ExpressionInput
}

input RequestGroupActionRelatedActionInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  targetId: ID  _targetId: ElementBase
  relationship: code  _relationship: ElementBase
  offsetDuration: DurationInput
  offsetRange: RangeInput
}

input RequestGroupActionParticipantInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: code  _type: ElementBase
  typeReference: ReferenceInput
  role: CodeableConceptInput
  function: CodeableConceptInput
  actor: ReferenceInput
}

type RequestGroupReadType {
  RequestGroup(id: ID!): RequestGroup
}

type RequestGroupListType {
  RequestGroupList(_filter: String
    author: [reference]
    authored: [date]
    code: [token]
    encounter: [reference]
    group_identifier: [token]
    identifier: [token]
    instantiates_canonical: [reference]
    instantiates_uri: [uri]
    intent: [token]
    participant: [reference]
    patient: [reference]
    priority: [token]
    status: [token]
    subject: [reference]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [RequestGroup]
}

type RequestGroupConnectionType {
  RequestGroupConection(_filter: String
    author: [reference]
    authored: [date]
    code: [token]
    encounter: [reference]
    group_identifier: [token]
    identifier: [token]
    instantiates_canonical: [reference]
    instantiates_uri: [uri]
    intent: [token]
    participant: [reference]
    patient: [reference]
    priority: [token]
    status: [token]
    subject: [reference]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): RequestGroupConnection
}

type RequestGroupConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [RequestGroupEdge]
}

type RequestGroupEdge {
  mode: String
  score: Float
  resource: RequestGroup
}

type RequestGroupCreateType {
  RequestGroupCreate(resource: RequestGroupInput): RequestGroupCreation
}

type RequestGroupCreation {
  location: String
  resource: RequestGroup
  information: OperationOutcome
}

type RequestGroupUpdateType {
  RequestGroupUpdate(id: ID, resource: RequestGroupInput): RequestGroupUpdate
}

type RequestGroupUpdate {
  resource: RequestGroup
  information: OperationOutcome
}

type RequestGroupDeleteType {
  RequestGroupDelete(id: ID): RequestGroupDelete
}

type RequestGroupDelete {
  information: OperationOutcome
}

