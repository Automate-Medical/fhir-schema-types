# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type Substance {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  instance: Boolean  _instance: ElementBase
  status: code  _status: ElementBase
  category: [CodeableConcept]
  code: CodeableReference!
  description: String  _description: ElementBase
  expiry: dateTime  _expiry: ElementBase
  quantity: Quantity
  ingredient: [SubstanceIngredient]
}

type SubstanceIngredient {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  quantity: Ratio
  substanceCodeableConcept: CodeableConcept
  substanceReference: Reference
}

input SubstanceInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  instance: Boolean  _instance: ElementBase
  status: code  _status: ElementBase
  category: [CodeableConceptInput]
  code: CodeableReferenceInput!
  description: String  _description: ElementBase
  expiry: dateTime  _expiry: ElementBase
  quantity: QuantityInput
  ingredient: [SubstanceIngredientInput]
}

input SubstanceIngredientInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  quantity: RatioInput
  substanceCodeableConcept: CodeableConceptInput
  substanceReference: ReferenceInput
}

type SubstanceReadType {
  Substance(id: ID!): Substance
}

type SubstanceListType {
  SubstanceList(_filter: String
    category: [token]
    code: [token]
    code_reference: [reference]
    expiry: [date]
    identifier: [token]
    quantity: [quantity]
    status: [token]
    substance_reference: [reference]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [Substance]
}

type SubstanceConnectionType {
  SubstanceConection(_filter: String
    category: [token]
    code: [token]
    code_reference: [reference]
    expiry: [date]
    identifier: [token]
    quantity: [quantity]
    status: [token]
    substance_reference: [reference]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): SubstanceConnection
}

type SubstanceConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [SubstanceEdge]
}

type SubstanceEdge {
  mode: String
  score: Float
  resource: Substance
}

type SubstanceCreateType {
  SubstanceCreate(resource: SubstanceInput): SubstanceCreation
}

type SubstanceCreation {
  location: String
  resource: Substance
  information: OperationOutcome
}

type SubstanceUpdateType {
  SubstanceUpdate(id: ID, resource: SubstanceInput): SubstanceUpdate
}

type SubstanceUpdate {
  resource: Substance
  information: OperationOutcome
}

type SubstanceDeleteType {
  SubstanceDelete(id: ID): SubstanceDelete
}

type SubstanceDelete {
  information: OperationOutcome
}

