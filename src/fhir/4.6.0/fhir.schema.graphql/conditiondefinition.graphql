# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type ConditionDefinition {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  subtitle: String  _subtitle: ElementBase
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  code: CodeableConcept!
  severity: CodeableConcept
  bodySite: CodeableConcept
  stage: CodeableConcept
  hasSeverity: Boolean  _hasSeverity: ElementBase
  hasBodySite: Boolean  _hasBodySite: ElementBase
  hasStage: Boolean  _hasStage: ElementBase
  definition: uri  _definition: [ElementBase]
  observation: [ConditionDefinitionObservation]
  medication: [ConditionDefinitionMedication]
  precondition: [ConditionDefinitionPrecondition]
  team: [Reference]
  questionnaire: [ConditionDefinitionQuestionnaire]
  plan: [ConditionDefinitionPlan]
}

type ConditionDefinitionObservation {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  category: CodeableConcept
  code: CodeableConcept
}

type ConditionDefinitionMedication {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  category: CodeableConcept
  code: CodeableConcept
}

type ConditionDefinitionPrecondition {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  type: code  _type: ElementBase
  code: CodeableConcept!
  valueCodeableConcept: CodeableConcept
  valueQuantity: Quantity
}

type ConditionDefinitionQuestionnaire {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  purpose: code  _purpose: ElementBase
  reference: Reference!
}

type ConditionDefinitionPlan {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  role: CodeableConcept
  reference: Reference!
}

input ConditionDefinitionInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  url: uri  _url: ElementBase
  identifier: [IdentifierInput]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  subtitle: String  _subtitle: ElementBase
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetailInput]
  description: markdown  _description: ElementBase
  useContext: [UsageContextInput]
  jurisdiction: [CodeableConceptInput]
  code: CodeableConceptInput!
  severity: CodeableConceptInput
  bodySite: CodeableConceptInput
  stage: CodeableConceptInput
  hasSeverity: Boolean  _hasSeverity: ElementBase
  hasBodySite: Boolean  _hasBodySite: ElementBase
  hasStage: Boolean  _hasStage: ElementBase
  definition: uri  _definition: [ElementBase]
  observation: [ConditionDefinitionObservationInput]
  medication: [ConditionDefinitionMedicationInput]
  precondition: [ConditionDefinitionPreconditionInput]
  team: [ReferenceInput]
  questionnaire: [ConditionDefinitionQuestionnaireInput]
  plan: [ConditionDefinitionPlanInput]
}

input ConditionDefinitionObservationInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  category: CodeableConceptInput
  code: CodeableConceptInput
}

input ConditionDefinitionMedicationInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  category: CodeableConceptInput
  code: CodeableConceptInput
}

input ConditionDefinitionPreconditionInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: code  _type: ElementBase
  code: CodeableConceptInput!
  valueCodeableConcept: CodeableConceptInput
  valueQuantity: QuantityInput
}

input ConditionDefinitionQuestionnaireInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  purpose: code  _purpose: ElementBase
  reference: ReferenceInput!
}

input ConditionDefinitionPlanInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  role: CodeableConceptInput
  reference: ReferenceInput!
}

type ConditionDefinitionReadType {
  ConditionDefinition(id: ID!): ConditionDefinition
}

type ConditionDefinitionListType {
  ConditionDefinitionList(_filter: String
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    composed_of: [reference]
    depends_on: [reference]
    derived_from: [reference]
    effective: [date]
    predecessor: [reference]
    successor: [reference]
    topic: [token]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [ConditionDefinition]
}

type ConditionDefinitionConnectionType {
  ConditionDefinitionConection(_filter: String
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    composed_of: [reference]
    depends_on: [reference]
    derived_from: [reference]
    effective: [date]
    predecessor: [reference]
    successor: [reference]
    topic: [token]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): ConditionDefinitionConnection
}

type ConditionDefinitionConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [ConditionDefinitionEdge]
}

type ConditionDefinitionEdge {
  mode: String
  score: Float
  resource: ConditionDefinition
}

type ConditionDefinitionCreateType {
  ConditionDefinitionCreate(resource: ConditionDefinitionInput): ConditionDefinitionCreation
}

type ConditionDefinitionCreation {
  location: String
  resource: ConditionDefinition
  information: OperationOutcome
}

type ConditionDefinitionUpdateType {
  ConditionDefinitionUpdate(id: ID, resource: ConditionDefinitionInput): ConditionDefinitionUpdate
}

type ConditionDefinitionUpdate {
  resource: ConditionDefinition
  information: OperationOutcome
}

type ConditionDefinitionDeleteType {
  ConditionDefinitionDelete(id: ID): ConditionDefinitionDelete
}

type ConditionDefinitionDelete {
  information: OperationOutcome
}

