# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type Binary {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  contentType: code  _contentType: ElementBase
  securityContext: Reference
  data: base64Binary  _data: ElementBase
}

input BinaryInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  contentType: code  _contentType: ElementBase
  securityContext: ReferenceInput
  data: base64Binary  _data: ElementBase
}

type BinaryReadType {
  Binary(id: ID!): Binary
}

type BinaryListType {
  BinaryList(_filter: String
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [Binary]
}

type BinaryConnectionType {
  BinaryConection(_filter: String
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): BinaryConnection
}

type BinaryConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [BinaryEdge]
}

type BinaryEdge {
  mode: String
  score: Float
  resource: Binary
}

type BinaryCreateType {
  BinaryCreate(resource: BinaryInput): BinaryCreation
}

type BinaryCreation {
  location: String
  resource: Binary
  information: OperationOutcome
}

type BinaryUpdateType {
  BinaryUpdate(id: ID, resource: BinaryInput): BinaryUpdate
}

type BinaryUpdate {
  resource: Binary
  information: OperationOutcome
}

type BinaryDeleteType {
  BinaryDelete(id: ID): BinaryDelete
}

type BinaryDelete {
  information: OperationOutcome
}

