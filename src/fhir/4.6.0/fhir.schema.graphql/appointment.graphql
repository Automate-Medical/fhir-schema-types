# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type Appointment {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  identifier: [Identifier]
  status: code  _status: ElementBase
  cancelationReason: CodeableConcept
  serviceCategory: [CodeableConcept]
  serviceType: [CodeableConcept]
  specialty: [CodeableConcept]
  appointmentType: CodeableConcept
  reason: [CodeableReference]
  priority: CodeableConcept
  description: String  _description: ElementBase
  supportingInformation: [Reference]
  start: instant  _start: ElementBase
  end: instant  _end: ElementBase
  minutesDuration: positiveInt  _minutesDuration: ElementBase
  slot: [Reference]
  created: dateTime  _created: ElementBase
  comment: String  _comment: ElementBase
  patientInstruction: String  _patientInstruction: ElementBase
  basedOn: [Reference]
  participant: [AppointmentParticipant]!
  requestedPeriod: [Period]
}

type AppointmentParticipant {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  type: [CodeableConcept]
  actor: Reference
  required: code  _required: ElementBase
  status: code  _status: ElementBase
  period: Period
}

input AppointmentInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  identifier: [IdentifierInput]
  status: code  _status: ElementBase
  cancelationReason: CodeableConceptInput
  serviceCategory: [CodeableConceptInput]
  serviceType: [CodeableConceptInput]
  specialty: [CodeableConceptInput]
  appointmentType: CodeableConceptInput
  reason: [CodeableReferenceInput]
  priority: CodeableConceptInput
  description: String  _description: ElementBase
  supportingInformation: [ReferenceInput]
  start: instant  _start: ElementBase
  end: instant  _end: ElementBase
  minutesDuration: positiveInt  _minutesDuration: ElementBase
  slot: [ReferenceInput]
  created: dateTime  _created: ElementBase
  comment: String  _comment: ElementBase
  patientInstruction: String  _patientInstruction: ElementBase
  basedOn: [ReferenceInput]
  participant: [AppointmentParticipantInput]!
  requestedPeriod: [PeriodInput]
}

input AppointmentParticipantInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: [CodeableConceptInput]
  actor: ReferenceInput
  required: code  _required: ElementBase
  status: code  _status: ElementBase
  period: PeriodInput
}

type AppointmentReadType {
  Appointment(id: ID!): Appointment
}

type AppointmentListType {
  AppointmentList(_filter: String
    actor: [reference]
    appointment_type: [token]
    based_on: [reference]
    date: [date]
    identifier: [token]
    location: [reference]
    part_status: [token]
    patient: [reference]
    practitioner: [reference]
    reason_code: [token]
    reason_reference: [reference]
    service_category: [token]
    service_type: [token]
    slot: [reference]
    specialty: [token]
    status: [token]
    supporting_info: [reference]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [Appointment]
}

type AppointmentConnectionType {
  AppointmentConection(_filter: String
    actor: [reference]
    appointment_type: [token]
    based_on: [reference]
    date: [date]
    identifier: [token]
    location: [reference]
    part_status: [token]
    patient: [reference]
    practitioner: [reference]
    reason_code: [token]
    reason_reference: [reference]
    service_category: [token]
    service_type: [token]
    slot: [reference]
    specialty: [token]
    status: [token]
    supporting_info: [reference]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): AppointmentConnection
}

type AppointmentConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [AppointmentEdge]
}

type AppointmentEdge {
  mode: String
  score: Float
  resource: Appointment
}

type AppointmentCreateType {
  AppointmentCreate(resource: AppointmentInput): AppointmentCreation
}

type AppointmentCreation {
  location: String
  resource: Appointment
  information: OperationOutcome
}

type AppointmentUpdateType {
  AppointmentUpdate(id: ID, resource: AppointmentInput): AppointmentUpdate
}

type AppointmentUpdate {
  resource: Appointment
  information: OperationOutcome
}

type AppointmentDeleteType {
  AppointmentDelete(id: ID): AppointmentDelete
}

type AppointmentDelete {
  information: OperationOutcome
}

