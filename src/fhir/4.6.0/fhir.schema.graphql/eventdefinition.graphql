# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type EventDefinition {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  url: uri  _url: ElementBase
  identifier: [Identifier]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  subtitle: String  _subtitle: ElementBase
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  subjectCodeableConcept: CodeableConcept
  subjectReference: Reference
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetail]
  description: markdown  _description: ElementBase
  useContext: [UsageContext]
  jurisdiction: [CodeableConcept]
  purpose: markdown  _purpose: ElementBase
  usage: String  _usage: ElementBase
  copyright: markdown  _copyright: ElementBase
  approvalDate: date  _approvalDate: ElementBase
  lastReviewDate: date  _lastReviewDate: ElementBase
  effectivePeriod: Period
  topic: [CodeableConcept]
  author: [ContactDetail]
  editor: [ContactDetail]
  reviewer: [ContactDetail]
  endorser: [ContactDetail]
  relatedArtifact: [RelatedArtifact]
  trigger: [TriggerDefinition]!
}

input EventDefinitionInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  url: uri  _url: ElementBase
  identifier: [IdentifierInput]
  version: String  _version: ElementBase
  name: String  _name: ElementBase
  title: String  _title: ElementBase
  subtitle: String  _subtitle: ElementBase
  status: code  _status: ElementBase
  experimental: Boolean  _experimental: ElementBase
  subjectCodeableConcept: CodeableConceptInput
  subjectReference: ReferenceInput
  date: dateTime  _date: ElementBase
  publisher: String  _publisher: ElementBase
  contact: [ContactDetailInput]
  description: markdown  _description: ElementBase
  useContext: [UsageContextInput]
  jurisdiction: [CodeableConceptInput]
  purpose: markdown  _purpose: ElementBase
  usage: String  _usage: ElementBase
  copyright: markdown  _copyright: ElementBase
  approvalDate: date  _approvalDate: ElementBase
  lastReviewDate: date  _lastReviewDate: ElementBase
  effectivePeriod: PeriodInput
  topic: [CodeableConceptInput]
  author: [ContactDetailInput]
  editor: [ContactDetailInput]
  reviewer: [ContactDetailInput]
  endorser: [ContactDetailInput]
  relatedArtifact: [RelatedArtifactInput]
  trigger: [TriggerDefinitionInput]!
}

type EventDefinitionReadType {
  EventDefinition(id: ID!): EventDefinition
}

type EventDefinitionListType {
  EventDefinitionList(_filter: String
    composed_of: [reference]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    depends_on: [reference]
    derived_from: [reference]
    description: [String]
    effective: [date]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    predecessor: [reference]
    publisher: [String]
    status: [token]
    successor: [reference]
    title: [String]
    topic: [token]
    url: [uri]
    version: [token]
    composed_of: [reference]
    depends_on: [reference]
    derived_from: [reference]
    effective: [date]
    predecessor: [reference]
    successor: [reference]
    topic: [token]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [EventDefinition]
}

type EventDefinitionConnectionType {
  EventDefinitionConection(_filter: String
    composed_of: [reference]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    depends_on: [reference]
    derived_from: [reference]
    description: [String]
    effective: [date]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    predecessor: [reference]
    publisher: [String]
    status: [token]
    successor: [reference]
    title: [String]
    topic: [token]
    url: [uri]
    version: [token]
    composed_of: [reference]
    depends_on: [reference]
    derived_from: [reference]
    effective: [date]
    predecessor: [reference]
    successor: [reference]
    topic: [token]
    context: [token]
    context_quantity: [quantity]
    context_type: [token]
    context_type_quantity: [composite]
    context_type_value: [composite]
    date: [date]
    description: [String]
    identifier: [token]
    jurisdiction: [token]
    name: [String]
    publisher: [String]
    status: [token]
    title: [String]
    url: [uri]
    version: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): EventDefinitionConnection
}

type EventDefinitionConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [EventDefinitionEdge]
}

type EventDefinitionEdge {
  mode: String
  score: Float
  resource: EventDefinition
}

type EventDefinitionCreateType {
  EventDefinitionCreate(resource: EventDefinitionInput): EventDefinitionCreation
}

type EventDefinitionCreation {
  location: String
  resource: EventDefinition
  information: OperationOutcome
}

type EventDefinitionUpdateType {
  EventDefinitionUpdate(id: ID, resource: EventDefinitionInput): EventDefinitionUpdate
}

type EventDefinitionUpdate {
  resource: EventDefinition
  information: OperationOutcome
}

type EventDefinitionDeleteType {
  EventDefinitionDelete(id: ID): EventDefinitionDelete
}

type EventDefinitionDelete {
  information: OperationOutcome
}

