# FHIR GraphQL Schema. Version 4.6.0

# import the types from 'types.graphql'

type AuditEvent {
  id: ID
  meta: Meta
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: Narrative
  contained: [Resource]
  extension: [Extension]
  modifierExtension: [Extension]
  type: Coding!
  subtype: [Coding]
  action: code  _action: ElementBase
  severity: code  _severity: ElementBase
  period: Period
  recorded: instant  _recorded: ElementBase
  outcome: CodeableConcept
  purposeOfEvent: [CodeableConcept]
  basedOn: [Reference]
  encounter: Reference
  agent: [AuditEventAgent]!
  source: AuditEventSource!
  entity: [AuditEventEntity]
}

type AuditEventAgent {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  type: CodeableConcept
  role: [CodeableConcept]
  who: Reference
  altId: String  _altId: ElementBase
  name: String  _name: ElementBase
  requestor: Boolean  _requestor: ElementBase
  location: Reference
  policy: uri  _policy: [ElementBase]
  media: Coding
  network: AuditEventAgentNetwork
  purposeOfUse: [CodeableConcept]
}

type AuditEventAgentNetwork {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  address: String  _address: ElementBase
  type: code  _type: ElementBase
}

type AuditEventSource {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  site: String  _site: ElementBase
  observer: Reference!
  type: [Coding]
}

type AuditEventEntity {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  what: Reference
  type: Coding
  role: Coding
  lifecycle: Coding
  securityLabel: [Coding]
  name: String  _name: ElementBase
  query: base64Binary  _query: ElementBase
  detail: [AuditEventEntityDetail]
}

type AuditEventEntityDetail {
  id: ID
  extension: [Extension]
  modifierExtension: [Extension]
  type: String  _type: ElementBase
  valueString: String  _valueString: ElementBase
  valueBase64Binary: base64Binary  _valueBase64Binary: ElementBase
}

input AuditEventInput {
  id: ID
  meta: MetaInput
  implicitRules: uri  _implicitRules: ElementBase
  language: code  _language: ElementBase
  text: NarrativeInput
  contained: [ResourceInput]
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodingInput!
  subtype: [CodingInput]
  action: code  _action: ElementBase
  severity: code  _severity: ElementBase
  period: PeriodInput
  recorded: instant  _recorded: ElementBase
  outcome: CodeableConceptInput
  purposeOfEvent: [CodeableConceptInput]
  basedOn: [ReferenceInput]
  encounter: ReferenceInput
  agent: [AuditEventAgentInput]!
  source: AuditEventSourceInput!
  entity: [AuditEventEntityInput]
}

input AuditEventAgentInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: CodeableConceptInput
  role: [CodeableConceptInput]
  who: ReferenceInput
  altId: String  _altId: ElementBase
  name: String  _name: ElementBase
  requestor: Boolean  _requestor: ElementBase
  location: ReferenceInput
  policy: uri  _policy: [ElementBase]
  media: CodingInput
  network: AuditEventAgentNetworkInput
  purposeOfUse: [CodeableConceptInput]
}

input AuditEventAgentNetworkInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  address: String  _address: ElementBase
  type: code  _type: ElementBase
}

input AuditEventSourceInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  site: String  _site: ElementBase
  observer: ReferenceInput!
  type: [CodingInput]
}

input AuditEventEntityInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  what: ReferenceInput
  type: CodingInput
  role: CodingInput
  lifecycle: CodingInput
  securityLabel: [CodingInput]
  name: String  _name: ElementBase
  query: base64Binary  _query: ElementBase
  detail: [AuditEventEntityDetailInput]
}

input AuditEventEntityDetailInput {
  id: ID
  extension: [ExtensionInput]
  modifierExtension: [ExtensionInput]
  type: String  _type: ElementBase
  valueString: String  _valueString: ElementBase
  valueBase64Binary: base64Binary  _valueBase64Binary: ElementBase
}

type AuditEventReadType {
  AuditEvent(id: ID!): AuditEvent
}

type AuditEventListType {
  AuditEventList(_filter: String
    action: [token]
    address: [String]
    agent: [reference]
    agent_name: [String]
    agent_role: [token]
    altid: [token]
    based_on: [reference]
    date: [date]
    encounter: [reference]
    entity: [reference]
    entity_name: [String]
    entity_role: [token]
    entity_type: [token]
    outcome: [token]
    patient: [reference]
    policy: [uri]
    purpose: [token]
    site: [token]
    source: [reference]
    subtype: [token]
    type: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): [AuditEvent]
}

type AuditEventConnectionType {
  AuditEventConection(_filter: String
    action: [token]
    address: [String]
    agent: [reference]
    agent_name: [String]
    agent_role: [token]
    altid: [token]
    based_on: [reference]
    date: [date]
    encounter: [reference]
    entity: [reference]
    entity_name: [String]
    entity_role: [token]
    entity_type: [token]
    outcome: [token]
    patient: [reference]
    policy: [uri]
    purpose: [token]
    site: [token]
    source: [reference]
    subtype: [token]
    type: [token]
    _text: [special]
    _content: [special]
    _id: [token]
    _lastUpdated: [date]
    _profile: [uri]
    _query: [special]
    _security: [token]
    _source: [uri]
    _tag: [token]
    _sort: String
    _count: Int
    _cursor: String): AuditEventConnection
}

type AuditEventConnection {
  count: Int
  offset: Int
  pagesize: Int
  first: ID
  previous: ID
  next: ID
  last: ID
  edges: [AuditEventEdge]
}

type AuditEventEdge {
  mode: String
  score: Float
  resource: AuditEvent
}

type AuditEventCreateType {
  AuditEventCreate(resource: AuditEventInput): AuditEventCreation
}

type AuditEventCreation {
  location: String
  resource: AuditEvent
  information: OperationOutcome
}

type AuditEventUpdateType {
  AuditEventUpdate(id: ID, resource: AuditEventInput): AuditEventUpdate
}

type AuditEventUpdate {
  resource: AuditEvent
  information: OperationOutcome
}

type AuditEventDeleteType {
  AuditEventDelete(id: ID): AuditEventDelete
}

type AuditEventDelete {
  information: OperationOutcome
}

